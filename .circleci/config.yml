version: 2.1
orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      event:
        type: string
      
    steps:
      - run:
          name: Destroy environments
          when: << parameters.event >>
          command: |
            echo "Destroying environments ${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure  https://kvdb.io/8opAbxPGLJrMEys5SyBN61/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi  
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm update
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: Run Frontend Test
          command: |            
            cd frontend
            npm install
            npm run test
  
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Backend Test
          command: |            
            cd backend
            npm install
            npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Run scan-frontend Test
          command: |            
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is casual notification for job:scan-frontend",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always
   

  

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run scan-backend 
          command: |            
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

           
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is failed notification for job:scan-backend",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: fail
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      
      - checkout
      - run:
          name: Install tar
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text >> .circleci/ansible/inventory.txt
              echo `cat .circleci/ansible/inventory.txt`      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
          
      - destroy-environment:
            event: on_fail
  
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["a5:fb:f3:b6:f7:e3:6c:7f:cd:96:39:2a:12:25:fc:90"]

      - attach_workspace:
            at: ~/ 
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # Your code 
              apk update
              apk upgrade
              apk add unzip 
              apk add curl
              /usr/local/bin/python -m pip install --upgrade pip
      - run:
            name: Install ansible
            command: |
              # your code here              
              apk add --update ansible 
              ansible --version
      - run:
            name: Install aws
            command: |
              # your code here                           
              pip install awscli --upgrade   
              aws --version       
      
      - run:
          name: Configure server
          no_output_timeout: 30m
          # Your code here
            
          command: |
            export NODE_ENV=production
            export VERSION=1
            export TYPEORM_CONNECTION=postgres
            export TYPEORM_MIGRATIONS_DIR=./src/migrations
            export TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts
            export TYPEORM_MIGRATIONS=./src/migrations/*.ts
            export TYPEORM_HOST=$TYPEORM_HOST
            export TYPEORM_PORT=$TYPEORM_PORT 
            export TYPEORM_USERNAME=$TYPEORM_USERNAME
            export TYPEORM_PASSWORD=$TYPEORM_PASSWORD 
            export TYPEORM_DATABASE=postgres
            cd .circleci/ansible/ 
            ansible-playbook -i inventory.txt configure-server.yml 
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
              event: on_fail

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk update
            apk upgrade
            apk add unzip 
            apk add curl
            /usr/local/bin/python -m pip install --upgrade pip    
      - run:
          name: Install node
          command: |
            apk add --update nodejs nodejs-npm
            node --version
            npm --version
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            #npm run build
            # Run and sve the migration output
            npm run migrations > migrations_dump.txt
            echo `cat migrations_dump.txt`
      - run:
          name: Send migration results to kvdb
          command: |
            # Your code here            
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo "migration successfull"
              # curl -H "Content-Type: text/plain" -H "token: f8c96b04-eedf-4709-a46e-a229beb2abb0" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
              curl https://kvdb.io/8opAbxPGLJrMEys5SyBN61/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "migration was not created"
              # curl -H "Content-Type: text/plain" -H "token: f8c96b04-eedf-4709-a46e-a229beb2abb0" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
              curl https://kvdb.io/8opAbxPGLJrMEys5SyBN61/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi
     # Here's where you will add some code to rollback on failure
      - destroy-environment:
              event: on_fail
      
      - revert-migrations
  
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0

    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt-get install python python-pip
            sudo pip install awscli
            aws --version
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[0].Instances[0].PublicIpAddress' --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --output text) 
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
              event: on_fail              

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["a5:fb:f3:b6:f7:e3:6c:7f:cd:96:39:2a:12:25:fc:90"] 
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk update
            apk upgrade
            apk add unzip 
            apk add curl
            /usr/local/bin/python -m pip install --upgrade pip
      - run:
          name: Install node
          command: |
            apk add --update nodejs nodejs-npm
            node --version
            npm --version
      - run:
          name: Install ansible
          command: |
            # your code here              
            apk add --update ansible 
            ansible --version  
      - run:
          name: Install aws
          command: |
            pip install awscli --upgrade   
            aws --version   
      - run:
          name: Configure Env File
          command: |
            echo NODE_ENV=production >> backend/.env
            echo VERSION=1 >> backend/.env
            echo TYPEORM_CONNECTION=postgres >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env                  
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
              event: on_fail

      - revert-migrations

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk update
            apk upgrade
            apk add unzip 
            apk add curl
            /usr/local/bin/python -m pip install --upgrade pip   
      - run:
          name: Install node
          command: |
            apk add --update nodejs nodejs-npm
            node --version
            npm --version
      - run:
          name: Install aws
          command: |    
            pip install awscli --upgrade   
            aws --version        
      - run:
          name: Get backend url
          command: |
            # your code here            
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[0].Instances[0].PublicIpAddress' --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --output text)
            echo $BACKEND_IP
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[0].Instances[0].PublicIpAddress' --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --output text)
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"  
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails -fixed
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          event: on_fail
      - revert-migrations

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here    
            
      - run:
          name: Update cloudfront distribution
          command: |              
              export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`OldWorkflowID\`].Value" --no-paginate --output text)
              OldWorkflowID=${OldWorkflowID}
              export CurrentWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
              CurrentWorkflowID=${CurrentWorkflowID}
              echo CurrentWorkflowID: "${CurrentWorkflowID}"
              echo newWorkFlowId: "${CIRCLE_WORKFLOW_ID:0:7}"
              echo OldWorkflowID: "${OldWorkflowID}"  
                   
              if [[ $OldWorkflowID = EMPTY ]] 
              then             
                echo "Oldworkflow is InitialStack"
                OldWorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"                
              else
                OldWorkflowID=$CurrentWorkflowID
              fi
              
              aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --stack-name InitialStack \
                --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" OldWorkflowID="${OldWorkflowID}" \
                --tags project=udapeople

      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          event: on_fail
      - revert-migrations
  
  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Remove old stacks and files
          command: | 
            # your code here        
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`OldWorkflowID\`].Value" --no-paginate --output text)
            OldWorkflowID=${OldWorkflowID#udapeople-}
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
            
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
          
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
                # your code goes here
                echo "Stack exist, remove....${OldWorkflowID}"
                echo "s3://udapeople-${OldWorkflowID}"
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"                            
            fi


workflows:
  default:
    jobs:

      - build-frontend
          filters
            branches 
              only [dev-branch, master]
       