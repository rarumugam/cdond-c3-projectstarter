version: 2.1
orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      event:
        type: string
      
    steps:
      - run:
          name: Destroy environments
          when: << parameters.event >>
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm update
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: Run Frontend Test
          command: |            
            cd frontend
            npm install
            npm run test
  
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: Run Backend Test
          command: |            
            cd backend
            npm install
            npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Run scan-frontend Test
          command: |            
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is casual notification for job:scan-frontend",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always
   

  

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Run scan-backend Test
          command: |            
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
           
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is failed notification for job:scan-backend",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: fail
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      
      - checkout
      - run:
          name: Install tar
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text >> .circleci/ansible/inventory.txt
              echo `cat .circleci/ansible/inventory.txt`      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
          
      - destroy-environment:
            event: on_fail
  
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["a5:fb:f3:b6:f7:e3:6c:7f:cd:96:39:2a:12:25:fc:90"]

      - attach_workspace:
            at: ~/ 
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # Your code 
              apk update
              apk upgrade
              apk add unzip 
              apk add curl
              /usr/local/bin/python -m pip install --upgrade pip
      - run:
            name: Install ansible
            command: |
              # your code here              
              apk add --update ansible 
              ansible --version
      - run:
            name: Install aws
            command: |
              # your code here                           
              pip install awscli --upgrade   
              aws --version       
      
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible/ 
            ansible-playbook -i inventory.txt configure-server.yml 
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
              event: on_fail

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk update
            apk upgrade
            apk add unzip 
            apk add curl
            /usr/local/bin/python -m pip install --upgrade pip    
      - run:
          name: Install node
          command: |
            apk add --update nodejs nodejs-npm
            node --version
            npm --version
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            #npm run build
            # Run and sve the migration output
            npm run migrations > migrations_dump.txt
            echo `cat migrations_dump.txt`
      - run:
          name: Send migration results to kvdb
          command: |
            # Your code here            
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo "migration successfull"
              # curl -H "Content-Type: text/plain" -H "token: f8c96b04-eedf-4709-a46e-a229beb2abb0" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
              curl https://kvdb.io/8opAbxPGLJrMEys5SyBN61/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "migration was not created"
              # curl -H "Content-Type: text/plain" -H "token: f8c96b04-eedf-4709-a46e-a229beb2abb0" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
              curl https://kvdb.io/8opAbxPGLJrMEys5SyBN61/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi
     # Here's where you will add some code to rollback on failure
      - destroy-environment:
              event: on_fail
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli

    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt-get install python python-pip
            sudo pip install awscli
            aws --version
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[0].Instances[0].PublicIpAddress' --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --output text) 
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
              event: on_fail              
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
          context: MyFirstPjtNotification
      - scan-backend:
          requires: [build-backend]
          context: MyFirstPjtNotification  
      - deploy-infrastructure :
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure :
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
     # - deploy-backend:
     #     requires: [run-migrations]